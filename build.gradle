plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
}

group = 'com.dapanda'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file("build/generated-snippets")
}

dependencies {
	// Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Spring Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Bean Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Testcontainers
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:mysql'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Rest Docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// 테스트 실행 설정
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

bootJar {
	dependsOn asciidoctor // jar 빌드 전에 asciidoctor(문서 생성) 실행
	copy {
		from("${asciidoctor.outputDir}")
		into 'src/main/resources/static/'
	}
}

// Jacoco 설정 (기존과 동일)
jacoco {
	toolVersion = "0.8.11"
}

def jacocoExcludePatterns = [
		'com/dapanda/Application.class',
		'**/common/**',
		'**/exception/**',
		'**/dto/**',
		'**/config/**',
		'**/test/**'
]

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: jacocoExcludePatterns)
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			excludes = jacocoExcludePatterns
		}
	}
}

// 불필요한 snippets 삭제
tasks.register('cleanUnwantedSnippets') {
	doLast {
		delete fileTree("build/generated-snippets") {
			include "**/*curl-request.adoc"
			include "**/*httpie-request.adoc"
			include "**/*request-body.adoc"
			include "**/*response-body.adoc"
		}
	}
}

clean {
	delete file('src/main/generated')
}

test.finalizedBy cleanUnwantedSnippets
